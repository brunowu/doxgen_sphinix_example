<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="apidoc_8py" kind="file" language="Python">
    <compoundname>apidoc.py</compoundname>
    <innerclass refid="classapidoc_1_1_type_action" prot="public">apidoc::TypeAction</innerclass>
    <innernamespace refid="namespaceapidoc">apidoc</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>breathe.apidoc</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>~~~~~~~~~~~~~~</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parses<sp/>doxygen<sp/>XML<sp/>tree<sp/>looking<sp/>for<sp/>C/C++<sp/>modules<sp/>and<sp/>creates<sp/>ReST<sp/>files</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>appropriately<sp/>to<sp/>create<sp/>code<sp/>documentation<sp/>with<sp/>Sphinx.<sp/>It<sp/>also<sp/>creates<sp/>a</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>modules<sp/>index<sp/>(See<sp/>TYPEDICT<sp/>below.).</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>derived<sp/>from<sp/>the<sp/>&quot;sphinx-autopackage&quot;<sp/>script,<sp/>which<sp/>is:</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Copyright<sp/>2008<sp/>Société<sp/>des<sp/>arts<sp/>technologiques<sp/>(SAT),</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>http://www.sat.qc.ca/</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:copyright:<sp/>Originally<sp/>by<sp/>Sphinx<sp/>Team,<sp/>C++<sp/>modifications<sp/>by<sp/>Tatsuyuki<sp/>Ishi</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:license:<sp/>BSD,<sp/>see<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>errno</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>xml.etree.ElementTree</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>breathe<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>__version__</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Account<sp/>for<sp/>FileNotFoundError<sp/>in<sp/>Python<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>IOError<sp/>is<sp/>broader<sp/>but<sp/>will<sp/>hopefully<sp/>suffice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>FileNotFoundError</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>NameError:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>FileNotFoundError<sp/>=<sp/>IOError</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Reference:<sp/>Doxygen<sp/>XSD<sp/>schema<sp/>file,<sp/>CompoundKind<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Only<sp/>what<sp/>breathe<sp/>supports<sp/>are<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Translates<sp/>identifier<sp/>to<sp/>English</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">TYPEDICT<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Class&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;interface&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Interface&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;struct&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Struct&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;union&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Union&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;Function&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;File&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;namespace&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Namespace&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;group&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Group&apos;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">print_info(msg,<sp/>args):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.quiet:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(msg)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">write_file(name,<sp/>text,<sp/>args):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Write<sp/>the<sp/>output<sp/>file<sp/>for<sp/>module/package<sp/>&lt;name&gt;.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>fname<sp/>=<sp/>os.path.join(args.destdir,<sp/></highlight><highlight class="stringliteral">&apos;%s.%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(name,<sp/>args.suffix))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args.dryrun:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_info(</highlight><highlight class="stringliteral">&apos;Would<sp/>create<sp/>file<sp/>%s.&apos;</highlight><highlight class="normal"><sp/>%<sp/>fname,<sp/>args)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.force<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>os.path.isfile(fname):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_info(</highlight><highlight class="stringliteral">&apos;File<sp/>%s<sp/>already<sp/>exists,<sp/>skipping.&apos;</highlight><highlight class="normal"><sp/>%<sp/>fname,<sp/>args)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_info(</highlight><highlight class="stringliteral">&apos;Creating<sp/>file<sp/>%s.&apos;</highlight><highlight class="normal"><sp/>%<sp/>fname,<sp/>args)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(os.path.dirname(fname)):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(os.path.dirname(fname))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>exc:<sp/><sp/></highlight><highlight class="comment">#<sp/>Guard<sp/>against<sp/>race<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>exc.errno<sp/>!=<sp/>errno.EEXIST:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(fname,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>target:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orig<sp/>=<sp/>target.read()</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>orig<sp/>==<sp/>text:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_info(</highlight><highlight class="stringliteral">&apos;File<sp/>%s<sp/>up<sp/>to<sp/>date,<sp/>skipping.&apos;</highlight><highlight class="normal"><sp/>%<sp/>fname,<sp/>args)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>FileNotFoundError:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>mind<sp/>if<sp/>it<sp/>isn&apos;t<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(fname,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>target:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.write(text)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">format_heading(level,<sp/>text):</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Create<sp/>a<sp/>heading<sp/>of<sp/>&lt;level&gt;<sp/>[1,<sp/>2<sp/>or<sp/>3<sp/>supported].&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>underlining<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;~&apos;</highlight><highlight class="normal">,<sp/>][level<sp/>-<sp/>1]<sp/>*<sp/>len(text)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;%s\n%s\n\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(text,<sp/>underlining)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">format_directive(package_type,<sp/>package,<sp/>project):</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Create<sp/>the<sp/>breathe<sp/>directive<sp/>and<sp/>add<sp/>the<sp/>options.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>directive<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;..<sp/>doxygen%s::<sp/>%s\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(package_type,<sp/>package)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>project:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directive<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/>:project:<sp/>%s\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>project</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>directive</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_function_name_from_ref(namespace_def,<sp/>ref):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>namespace_def:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tag.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;sectiondef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>tag.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;func&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>functionmember<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tag:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>functionmember.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;memberdef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>functionmember.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)<sp/>==<sp/>ref:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>memberdef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>functionmember:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>memberdef.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;argsstring&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>memberdef.text</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>memberdef.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>memberdef.text</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;found:<sp/>{}<sp/>-<sp/>{}&quot;</highlight><highlight class="normal">.format(name,<sp/>args))</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(name,<sp/>args)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_typedef_info_from_ref(namespace_def,<sp/>ref):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>namespace_def:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tag.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;sectiondef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>tag.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;typedef&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>typedef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tag:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>typedef.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;memberdef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>typedef.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)<sp/>==<sp/>ref:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basetype<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_e<sp/>=<sp/>typedef.find(</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type_e.find(</highlight><highlight class="stringliteral">&apos;ref&apos;</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basetype<sp/>=<sp/>type_e.find(</highlight><highlight class="stringliteral">&apos;ref&apos;</highlight><highlight class="normal">).text</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basetype<sp/>=<sp/>type_e.text</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>typedef.find(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">).text</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(basetype,<sp/>name)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">clean_function_name(function_name):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>function_name:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_name[0:function_name.index(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function_name.startswith(</highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;operator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_name</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">clean_function_arguments(function_arguments):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaned<sp/>=<sp/>function_arguments.replace(</highlight><highlight class="stringliteral">&quot;&lt;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaned<sp/>=<sp/>cleaned.replace(</highlight><highlight class="stringliteral">&quot;<sp/>&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cleaned</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">clean_typedef_base_for_file(typedef_base):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaned<sp/>=<sp/>typedef_base.replace(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ptr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>cleaned<sp/>=<sp/>cleaned.replace(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cleaned</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">handle_namespace(namespace,<sp/>compound,<sp/>args):</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace_xml_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}.xml&quot;</highlight><highlight class="normal">.format(compound.get(</highlight><highlight class="stringliteral">&apos;refid&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>namespace_xml_str<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.listdir(args.rootpath):</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{}<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>{}&quot;</highlight><highlight class="normal">.format(args.rootpath,<sp/>namespace_xml_str),<sp/>file=sys.stderr)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace_tree<sp/>=<sp/>xml.etree.ElementTree.parse(os.path.join(args.rootpath,<sp/>namespace_xml_str))</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace_xml<sp/>=<sp/>namespace_tree.getroot()</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ns_compounddef<sp/>=<sp/>namespace_xml[0];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ns_compounddef.tag<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;compounddef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>ns_compounddef[0].text<sp/>!=<sp/>namespace:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>namespace:<sp/>{}<sp/>in<sp/>xml<sp/>file:<sp/>{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>namespace_xml_str),<sp/>file=sys.stderr)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>functions<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>typedefs<sp/>=<sp/>dict()</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>member<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>compound:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>member.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;enum&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_name<sp/>=<sp/>member.findtext(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&quot;Enum<sp/>{}::{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>member_name))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;..<sp/>doxygenenum::<sp/>{}::{}\n&quot;</highlight><highlight class="normal">.format(namespace,<sp/>member_name)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_file(os.path.join(</highlight><highlight class="stringliteral">&apos;enum&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;{}_{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>member_name)),<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>member.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;typedef&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>=<sp/>get_typedef_info_from_ref(ns_compounddef,<sp/>member.get(</highlight><highlight class="stringliteral">&apos;refid&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedefs.setdefault(typedef[0],<sp/>[]).append(typedef[1])</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>member.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>member_name<sp/>=<sp/>get_function_name_from_ref(ns_compounddef,<sp/>member.get(</highlight><highlight class="stringliteral">&apos;refid&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clean_name<sp/>=<sp/>clean_function_name(member_name[0])</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions.setdefault(clean_name,<sp/>[]).append((member_name[0],<sp/>member_name[1]))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;found<sp/>function<sp/>{}<sp/>with<sp/>args<sp/>{}&quot;</highlight><highlight class="normal">.format(member_name[0],<sp/>member_name[1]))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>typedefs_base<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>typedefs.items():</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&quot;Typedefs<sp/>{}::{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>typedefs_base[0]))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>typedef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>typedefs_base[1]:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;..<sp/>doxygentypedef::<sp/>{}::{}\n&quot;</highlight><highlight class="normal">.format(namespace,<sp/>typedef)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef_file_name<sp/>=<sp/>clean_typedef_base_for_file(typedefs_base[0])<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_file(os.path.join(</highlight><highlight class="stringliteral">&apos;typedef&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;{}_{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>typedef_file_name)),<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>functions.items():</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>{}::{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>func[0]))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>overloads<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>func[1]:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clean_args<sp/>=<sp/>clean_function_arguments(overloads[1])</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;..<sp/>doxygenfunction::<sp/>{}::{}{}\n&quot;</highlight><highlight class="normal">.format(namespace,<sp/>overloads[0],clean_args)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_file(os.path.join(</highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;{}_{}&quot;</highlight><highlight class="normal">.format(namespace,<sp/>func[0])),<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">handle_file_for_defines(file_name,<sp/>refid,<sp/>compound,<sp/>args):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>filexml_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}.xml&quot;</highlight><highlight class="normal">.format(refid)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>filexml_str<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.listdir(args.rootpath):</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{}<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>{}&quot;</highlight><highlight class="normal">.format(args.rootpath,<sp/>filexml_str),<sp/>file=sys.stderr)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>filexmltree<sp/>=<sp/>xml.etree.ElementTree.parse(os.path.join(args.rootpath,<sp/>filexml_str))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>filexmlroot<sp/>=<sp/>filexmltree.getroot()</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>filecompound<sp/>=<sp/>filexmlroot.find(</highlight><highlight class="stringliteral">&apos;compounddef&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>defines<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>section<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>filecompound:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>section.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;sectiondef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>section.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;define&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>member<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>section:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>member.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;memberdef&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>member.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;define&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defines.append(member.find(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">).text)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defines:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&quot;Defines<sp/>{}&quot;</highlight><highlight class="normal">.format(file_name))</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>define<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>defines:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;..<sp/>doxygendefine::<sp/>{}\n&quot;</highlight><highlight class="normal">.format(define)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_file(os.path.join(</highlight><highlight class="stringliteral">&apos;define&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">.format(refid)),<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_package_file(package,<sp/>package_type,<sp/>package_id,<sp/>compound,<sp/>args):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Build<sp/>the<sp/>text<sp/>of<sp/>the<sp/>file<sp/>and<sp/>write<sp/>the<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>over<sp/>types<sp/>that<sp/>weren&apos;t<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;create_package_file<sp/>{}<sp/>-<sp/>{}&quot;</highlight><highlight class="normal">.format(package,<sp/>package_type))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>package_type<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>args.outtypes:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;NOT<sp/>SUPPORTED<sp/>TYPE!!!!!{}&quot;</highlight><highlight class="normal">.format(package_type))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&apos;%s<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(TYPEDICT[package_type],<sp/>package))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>+=<sp/>format_directive(package_type,<sp/>package,<sp/>args.project)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>write_file(os.path.join(package_type,<sp/>package_id),<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>package_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;namespace&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_namespace(package,<sp/>compound,<sp/>args)<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>package_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_file_for_defines(package,<sp/>package_id,<sp/>compound,<sp/>args)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_modules_toc_file(key,<sp/>value,<sp/>args):</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Create<sp/>the<sp/>module&apos;s<sp/>index.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.isdir(os.path.join(args.destdir,<sp/>key)):</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>=<sp/>format_heading(1,<sp/></highlight><highlight class="stringliteral">&apos;%s<sp/>list&apos;</highlight><highlight class="normal"><sp/>%<sp/>value)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;..<sp/>toctree::\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/>:glob:\n\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>text<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/>%s/*\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>key</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>write_file(</highlight><highlight class="stringliteral">&apos;%slist&apos;</highlight><highlight class="normal"><sp/>%<sp/>key,<sp/>text,<sp/>args)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">recurse_tree(args):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Look<sp/>for<sp/>every<sp/>file<sp/>in<sp/>the<sp/>directory<sp/>tree<sp/>and<sp/>create<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ReST<sp/>files.</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>xml.etree.ElementTree.parse(os.path.join(args.rootpath,<sp/></highlight><highlight class="stringliteral">&apos;index.xml&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assuming<sp/>this<sp/>is<sp/>a<sp/>valid<sp/>Doxygen<sp/>XML</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compound<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>index.getroot():</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_package_file(compound.findtext(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">),<sp/>compound.get(</highlight><highlight class="stringliteral">&apos;kind&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compound.get(</highlight><highlight class="stringliteral">&apos;refid&apos;</highlight><highlight class="normal">),<sp/>compound,<sp/>args)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classapidoc_1_1_type_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapidoc_1_1_type_action" kindref="compound">TypeAction</ref>(argparse.Action):</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>option_strings,<sp/>dest,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(TypeAction,<sp/>self).__init__(option_strings,<sp/>dest,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classapidoc_1_1_type_action_1a855dc9c26d26113c82b939c25b985d09" kindref="member">default</ref><sp/>=<sp/>TYPEDICT.keys()</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classapidoc_1_1_type_action_1afaecc290fd4fbf2bf6d919359adbc1f6" kindref="member">metavar</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">.join(TYPEDICT.keys())</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__call__(self,<sp/>parser,<sp/>namespace,<sp/>values,<sp/>option_string=None):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_list<sp/>=<sp/>values.split(</highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>value_list:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>TYPEDICT:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;%s<sp/>not<sp/>a<sp/>valid<sp/>option&quot;</highlight><highlight class="normal"><sp/>%<sp/>value)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setattr(namespace,<sp/>self.dest,<sp/>value_list)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">main():</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Parse<sp/>and<sp/>check<sp/>the<sp/>command<sp/>line<sp/>arguments.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>parser<sp/>=<sp/>argparse.ArgumentParser(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description=</highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral">Parse<sp/>XML<sp/>created<sp/>by<sp/>Doxygen<sp/>in<sp/>&lt;rootpath&gt;<sp/>and<sp/>create<sp/>one<sp/>reST<sp/>file<sp/>with</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral">breathe<sp/>generation<sp/>directives<sp/>per<sp/>definition<sp/>in<sp/>the<sp/>&lt;DESTDIR&gt;.</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral">Note:<sp/>By<sp/>default<sp/>this<sp/>script<sp/>will<sp/>not<sp/>overwrite<sp/>already<sp/>created<sp/>files.&quot;&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatter_class=argparse.RawDescriptionHelpFormatter)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--output-dir&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;destdir&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;Directory<sp/>to<sp/>place<sp/>all<sp/>output&apos;</highlight><highlight class="normal">,<sp/>required=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--force&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;force&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;Overwrite<sp/>existing<sp/>files&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--dry-run&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;dryrun&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;Run<sp/>the<sp/>script<sp/>without<sp/>creating<sp/>files&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-T&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--no-toc&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;notoc&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;Don\&apos;t<sp/>create<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>file&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--suffix&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;suffix&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;file<sp/>suffix<sp/>(default:<sp/>rst)&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="stringliteral">&apos;rst&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-p&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--project&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;project&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;project<sp/>to<sp/>add<sp/>to<sp/>generated<sp/>directives&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--generate&apos;</highlight><highlight class="normal">,<sp/>action=TypeAction,<sp/>dest=</highlight><highlight class="stringliteral">&apos;outtypes&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;types<sp/>of<sp/>output<sp/>to<sp/>generate,<sp/>comma-separated<sp/>list&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;-q&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--quiet&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;store_true&apos;</highlight><highlight class="normal">,<sp/>dest=</highlight><highlight class="stringliteral">&apos;quiet&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;suppress<sp/>informational<sp/>messages&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;--version&apos;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&apos;version&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>version=</highlight><highlight class="stringliteral">&apos;Breathe<sp/>(breathe-apidoc)<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>__version__)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.add_argument(</highlight><highlight class="stringliteral">&apos;rootpath&apos;</highlight><highlight class="normal">,<sp/>type=str,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;The<sp/>directory<sp/>contains<sp/>index.xml&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args.suffix.startswith(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.suffix<sp/>=<sp/>args.suffix[1:]</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.isdir(args.rootpath):</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;%s<sp/>is<sp/>not<sp/>a<sp/>directory.&apos;</highlight><highlight class="normal"><sp/>%<sp/>args.rootpath,<sp/>file=sys.stderr)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;index.xml&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>os.listdir(args.rootpath):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;%s<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>index.xml&apos;</highlight><highlight class="normal"><sp/>%<sp/>args.rootpath,<sp/>file=sys.stderr)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.isdir(args.destdir):</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.dryrun:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(args.destdir)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>args.rootpath<sp/>=<sp/>os.path.abspath(args.rootpath)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>recurse_tree(args)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.notoc:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>args.outtypes:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_modules_toc_file(key,<sp/>TYPEDICT[key],<sp/>args)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_modules_toc_file(</highlight><highlight class="stringliteral">&quot;enum&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,<sp/>args)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_modules_toc_file(</highlight><highlight class="stringliteral">&quot;typedef&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Typedef&quot;</highlight><highlight class="normal">,<sp/>args)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_modules_toc_file(</highlight><highlight class="stringliteral">&quot;define&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Define&quot;</highlight><highlight class="normal">,<sp/>args)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">#<sp/>So<sp/>program<sp/>can<sp/>be<sp/>started<sp/>with<sp/>&quot;python<sp/>-m<sp/>breathe.apidoc<sp/>...&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>main()</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="apidoc.py"/>
  </compounddef>
</doxygen>
